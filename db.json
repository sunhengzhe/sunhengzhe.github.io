{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/aoliao.png","path":"images/aoliao.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"ca4676214e2f3f6bcb8b587ab85416a7eb090157","modified":1466965365867},{"_id":"themes/next/.bowerrc","hash":"20038353db532b4c40625419d396da7359f89cbe","modified":1466867123487},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1466867123494},{"_id":"themes/next/.javascript_ignore","hash":"beb0b95736650284ceb712a162cc033847a83cd3","modified":1466867123495},{"_id":"themes/next/.gitignore","hash":"63d003fa46cf9665b4dab1786f9dc694812a5a79","modified":1466867123493},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1466867123496},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1466867123488},{"_id":"themes/next/README.en.md","hash":"fa31bbc6dd8778b8dee469740c92b3b5b59702af","modified":1466867123498},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1466867123499},{"_id":"themes/next/_config.yml","hash":"1387fbd916ccd842a0be76a2b36bde7003f652cc","modified":1466867123500},{"_id":"themes/next/gulpfile.coffee","hash":"4e8c1082fa82e383494ff5b5963b7936d9c7bb2e","modified":1466867123503},{"_id":"themes/next/bower.json","hash":"da39b00fcdf2e7a42af412de0a4d3617cc6d7084","modified":1466867123501},{"_id":"themes/next/package.json","hash":"95eaba1607544965e432d56406bae391dd11bcbb","modified":1466867123598},{"_id":"source/_posts/Introduction-to-Algorithms-2.md","hash":"6e14c4dd20972682323409c02eee1c097fd72c5e","modified":1467126101762},{"_id":"source/_posts/use-svg-to-draw-line.md","hash":"40d14fc47ddd40221d6647861f805fe77b702536","modified":1467126034076},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"2692e36cc35b1594530981e7727771f601720a43","modified":1466867123491},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"4312fb37fa2b8663006be3c4fe01125ec01171c1","modified":1466867123490},{"_id":"themes/next/languages/default.yml","hash":"d2f6784b9c6567b64e58736e36025dbf96d863d4","modified":1466867123506},{"_id":"themes/next/languages/de.yml","hash":"4c3ffeb0d214c807a226dd98214958cb5483df1c","modified":1466867123505},{"_id":"themes/next/languages/fr-FR.yml","hash":"d8a40fe025fad6f42df0cf16d4be2d513769b062","modified":1466867123508},{"_id":"themes/next/languages/id.yml","hash":"19537c8bae42c4c2e7d06a64537e8dfd503b7e19","modified":1466867123510},{"_id":"themes/next/languages/ja.yml","hash":"e594aa42a33c489e4a65065659a01bb76c3c0cb5","modified":1466867123512},{"_id":"themes/next/languages/pt.yml","hash":"4c64594f477905d5d2d9ca2422f03175b7b0c617","modified":1466867123513},{"_id":"themes/next/languages/ru.yml","hash":"c3aedb94decf05a301662afc3398ab563dd9995a","modified":1466867123515},{"_id":"themes/next/languages/zh-Hans.yml","hash":"23b45e77c1846c9457b98c745a60a9461678c389","modified":1466867123516},{"_id":"themes/next/languages/zh-hk.yml","hash":"88e603eb0f3fd25c35bb37bd30372fd77bba7c46","modified":1466867123517},{"_id":"themes/next/languages/zh-tw.yml","hash":"04479b419c72b71fd34046f3fc33ebda4fe8de84","modified":1466867123518},{"_id":"themes/next/layout/_layout.swig","hash":"1138b849e1240249480849cc2b6c6d09b28207a5","modified":1466867123520},{"_id":"themes/next/languages/en.yml","hash":"df81ab6b1cf3c88ed053d3766381cd12eb659fe3","modified":1466867123507},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1466867123593},{"_id":"themes/next/layout/page.swig","hash":"a91e3fd7aef26e8a02e339e3372801c517f400cf","modified":1466867123594},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1466867123590},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1466867123592},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1466867123595},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1466867123597},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1466867123600},{"_id":"themes/next/test/.jshintrc","hash":"1dae9d1cf7df1ae6d5c5efd6cffb949e9b8dcebb","modified":1466867123934},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1466867123935},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1466867123936},{"_id":"source/_posts/Introduction-to-Algorithms-4.md","hash":"6fbd495c52b4ffe15580106b5e6438f97ecead20","modified":1467215563458},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"b87a5122dbff1d5fccf8f3d09d1640bd4b01c4a0","modified":1466867123522},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1466867123525},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9fc9f89c169439d7584197930359b758eb198a1c","modified":1466867123527},{"_id":"themes/next/layout/_macro/post.swig","hash":"843389ec3cb4c2baa6a6a2bb916f803c89ca723b","modified":1466867123524},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"d569af20d20a960d534a5b60f90c20fef519d351","modified":1466867123528},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c5db707b46eac6a5df1d2a77f8556945a66fd181","modified":1466867123554},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1466867123556},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1466867123557},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"c9d45628330ce8bf5fbe71c9f131c7d75334c1c4","modified":1466867123588},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5d84f3938e99f1908a6a1d44dd530740625f0188","modified":1466867123530},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1466867123531},{"_id":"themes/next/layout/_partials/footer.swig","hash":"27669118b957e8a39d843b63dddf561c9d62b336","modified":1466867123533},{"_id":"themes/next/layout/_partials/head.swig","hash":"881abebed3a7fa71827365b0ba0e84ec525eeb7f","modified":1466867123535},{"_id":"themes/next/layout/_partials/header.swig","hash":"46f8bbe51c0334c64c3a237bc0fe8ef73c6e58e1","modified":1466867123538},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1466867123539},{"_id":"themes/next/layout/_partials/search.swig","hash":"95b55fe35f2d2c22f2cc055d4379b5435314c7ec","modified":1466867123540},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1466867123602},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1466867123605},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1466867123790},{"_id":"themes/next/scripts/tags/full-image.js","hash":"86194a05a8c6499de0b2aaa525d6de135778c0ae","modified":1466867123603},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1466867123787},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1466867123792},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1466867123795},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1466867123796},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1466867123788},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1466867123794},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1466867123798},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1466867123799},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1466867123800},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1466867123802},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1466867123803},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1466867123804},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1466867123776},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1466867123562},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1466867123561},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1466867123702},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1466867123708},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1466867123703},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1466867123767},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1466867123773},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1466867123778},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1466867123560},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1466867123564},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"91c5353fcb94cc3b3f265b06ad2341734bc4c826","modified":1466867123565},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"8ba01f1ac07fbca62a4b00f5a0a3a506122c1530","modified":1466867123578},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1466867123583},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"5bd98c26cc188a2a30504d1330a0eaae34034db0","modified":1466867123584},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1466867123587},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"4a5c6df1579a4ca72ed17f7dbd6d16a509aa7dc8","modified":1466867123586},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1466867123537},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1466867123544},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"efa7efcbb575381b508f9aa0e0c53140eef72a7b","modified":1466867123542},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1466867123545},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"bf8e9223a40748b2e3ef77d753a8e1dbbce8095e","modified":1466867123547},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"3fdde03f45a80f7a85097a40b40358adde618fc7","modified":1466867123548},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1466867123550},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1466867123552},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1466867123809},{"_id":"themes/next/source/js/src/post-details.js","hash":"458af3b1bd7783c1950808e66cedfa9fb68bf21f","modified":1466867123814},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1466867123808},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1466867123817},{"_id":"themes/next/source/js/src/utils.js","hash":"418d09eb4df5dcc5e8d13d7f6245b1888200b51c","modified":1466867123818},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1466867123810},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1466867123812},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1466867123822},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"bb093f2ac1f1305069d873a7941324c8e0de3135","modified":1466867123862},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1466867123865},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1466867123863},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1466867123867},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1466867123851},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1466867123853},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1466867123856},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1466867123868},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1466867123904},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1466867123898},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1466867123854},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1466867123905},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1466867123909},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1466867123912},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1466867123907},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1466867123910},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1466867123919},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1466867123918},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1466867123927},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1466867123821},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1466867123930},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1466867123932},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1466867123707},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1466867123701},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1466867123766},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1466867123705},{"_id":"themes/next/source/css/_variables/base.styl","hash":"a7ae72e846393493385275d934eaa78534d9834c","modified":1466867123771},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"b8e3663996b39590509d843f674360872b0242ac","modified":1466867123769},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1466867123901},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"ae5b8597603d4e42ee66ed121544e7b1c644767e","modified":1466867123568},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"3931f9c3bac3970a3f54c9d0072ae4c950aa176c","modified":1466867123571},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1466867123574},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1466867123570},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1466867123576},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1466867123573},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"f8b6a3017ab79057ce99f1ccb512193d67f4a35f","modified":1466867123580},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"2338be12ffee58bc08197cb9da8aaf31737aaf5c","modified":1466867123581},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"a9d064d600ee35acd66508167e1ac8c6cfdbdcd8","modified":1466867123816},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1466867123824},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1466867123826},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1466867123827},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1466867123829},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1466867123831},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1466867123833},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1466867123845},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1466867123848},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1466867123849},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"811432ad1e2d6c1f6da9a63fd919bf2a02b71dd9","modified":1466867123871},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1466867123873},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"4c2c5f5f6cc86d775a44b944661e038b7be98149","modified":1466867123875},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1466867123896},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1466867123860},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1466867123859},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1466867123914},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1466867123916},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1466867123610},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1466867123612},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1466867123609},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1466867123613},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1466867123636},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1466867123671},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5a35aa0381b0e1d465b952a997194441020446ea","modified":1466867123693},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1466867123696},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1466867123698},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1466867123699},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"b6ee5fefa6046086a76ddbcfafc82482816fa3e0","modified":1466867123694},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1466867123691},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1466867123711},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1466867123712},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1466867123715},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1466867123713},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"55b44e03054cd20ed8129bf986b15fba5fd85aad","modified":1466867123717},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1466867123719},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1466867123718},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c9875c010bebd77b4f59d459a10455fceb0a66a1","modified":1466867123752},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"de31e923bf5102498f06b1ae6bdf2ea22409f3e0","modified":1466867123754},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"2182a6da3434a6fd4d03ab1592c645d3d3c88500","modified":1466867123755},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"9887bd3894db5394c1e64e800afaae55f47e8dd0","modified":1466867123757},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1466867123759},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"88a5e0e95f93e4adb196bff1aac17d6cfb03768a","modified":1466867123763},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"124b540f059fd1ed13514362007cfc70355278c6","modified":1466867123740},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1466867123742},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"13af2fb21fabfc4df4b577ce5363e13d03daff71","modified":1466867123744},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"983c0723e8cfd84b67c2e66da0c26425a8db06e0","modified":1466867123761},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1466867123746},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1466867123748},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1466867123880},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1466867123883},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1466867123894},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1466867123924},{"_id":"themes/next/source/images/aoliao.png","hash":"4cf2a2757bcf9b20a36af91d43835198ba6c3cba","modified":1466867123785},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1466867123835},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1466867123837},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1466867123839},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1466867123842},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1466867123841},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1466867123844},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1466867123891},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1466867123615},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"70ec8d38d2b3ee1906793d1dcb68032adfa65f03","modified":1466867123626},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1466867123630},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1466867123631},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"12e366f04497e3f44388fd40111a03e02f7c26af","modified":1466867123628},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1466867123634},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"b8f9c95702e87fd0b170ab586c82c9718a245f8a","modified":1466867123632},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1466867123638},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1466867123639},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ca20affaeaf33c0904cb6356864fc6b78e95f447","modified":1466867123644},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1466867123641},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1466867123643},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"2bc3e33fdfbcf348c96ca60598f629dcd7ba3617","modified":1466867123645},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"929fac3a505bacbce6ba63009fd15851e2a8669d","modified":1466867123647},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1466867123650},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1466867123653},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1466867123651},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"681b7c8ce4dc47130a0ca67c1ec62be7c96e4c4f","modified":1466867123654},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1466867123656},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1466867123658},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1466867123660},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1466867123662},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1466867123663},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1466867123666},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1466867123668},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1466867123669},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1466867123665},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1466867123673},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"dd941824210733588841897457e0cc9697ca5608","modified":1466867123674},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1466867123676},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1466867123680},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1466867123684},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1466867123686},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"7f7e9df15148608a9c29326dd880d8e8e8efc0ec","modified":1466867123682},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"dcb4548d07cbb38b645b1753cf3ee7157e16921a","modified":1466867123687},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"7bd182d918f3117335a5ee87a1b544e6d2b54d7d","modified":1466867123689},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1466867123649},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"a83f493e494f5c73fab8f6f5b686ef1670490095","modified":1466867123678},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1466867123618},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1466867123621},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1466867123624},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1466867123623},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1466867123735},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1466867123737},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1466867123619},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1466867123750},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1466867123888},{"_id":"public/CNAME","hash":"b8bda8a8a2b7d9895527115fab04a267cf53cc8e","modified":1467298332697},{"_id":"public/archives/index.html","hash":"35892869d7e5ad0767b8aaf873ddf2b5cdd5f1fa","modified":1467298334268},{"_id":"public/archives/2016/index.html","hash":"b2b24994c8d3ab861dbd45384b3163f4dd23bbf1","modified":1467298334273},{"_id":"public/archives/2016/06/index.html","hash":"1a64811c5678afc0dea7c72ffc3daa41a6be3700","modified":1467298334401},{"_id":"public/tags/读书笔记/index.html","hash":"38b55c4d838d0167412a932bf095cdc92430e458","modified":1467298334401},{"_id":"public/tags/算法/index.html","hash":"727e5dfe9271fff65f1b86953868b378eba6911d","modified":1467298334401},{"_id":"public/tags/svg/index.html","hash":"de560ce431b583783ef10e9fe5897d03e574896f","modified":1467298334401},{"_id":"public/tags/每周总结/index.html","hash":"b53c1a786e9a08f767418c1861f41279b672b20f","modified":1467298334401},{"_id":"public/index.html","hash":"9d7b8cc10a38a7d31b47e0dcb1d238b3655ce6aa","modified":1467298334401},{"_id":"public/2016/06/25/Introduction-to-Algorithms-2/index.html","hash":"04a91df2d9055da45693d07ea5eb61d296140cbf","modified":1467298334402},{"_id":"public/2016/06/28/use-svg-to-draw-line/index.html","hash":"a6238b51048ed052a623f02ec5d889ddfe8ff2db","modified":1467298334402},{"_id":"public/2016/06/29/Introduction-to-Algorithms-4/index.html","hash":"87826f28c2532321f2ad8cccb010acb8e4928f51","modified":1467298334416},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1467298334416},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1467298334417},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1467298334417},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1467298334418},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1467298334418},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1467298334418},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1467298334418},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1467298334418},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1467298334418},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1467298334418},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1467298334418},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1467298334418},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1467298334418},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1467298334419},{"_id":"public/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1467298334419},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1467298334419},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1467298334419},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1467298334419},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1467298334419},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1467298334419},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1467298334419},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1467298334419},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1467298334420},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1467298334420},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1467298343316},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1467298343336},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1467298343341},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1467298343375},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1467298343375},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1467298343375},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1467298343375},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1467298343376},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1467298343376},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1467298343376},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1467298343377},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1467298343377},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1467298343377},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1467298343377},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1467298343377},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1467298343377},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1467298343377},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1467298343377},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1467298343377},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1467298343378},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1467298343378},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1467298343378},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1467298343378},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1467298343378},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1467298343378},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1467298343378},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1467298343379},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1467298343379},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1467298343397},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1467298343397},{"_id":"public/css/main.css","hash":"8a6f0068c6578457b0e25087e5220d81439be38c","modified":1467298343397},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1467298343397},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1467298343398},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1467298343398},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1467298343398},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1467298343398},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1467298343398},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1467298343398},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1467298343398},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1467298343399},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1467298343399},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1467298343532},{"_id":"public/images/aoliao.png","hash":"4cf2a2757bcf9b20a36af91d43835198ba6c3cba","modified":1467298343550}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"《算法导论》第二章：算法基础","date":"2016-06-24T18:47:19.000Z","_content":"这一章考察求解了排序问题中的**插入排序**算法，并引用算法设计中的**分治法**来开发**归并排序**的算法。\n\n## 插入排序\n\n插入排序的工作方式就像许多人排序一手扑克牌。开始时手中一张牌都没有，然后我们每起一次牌，都会将它与手中的牌作比较，从左到右（或者从右到左）来找到这张牌的正确位置，一直到起到最后一张。这个算法的关键之处就在于**你拿在手上的牌始终都是已经排好序的**。\n\n### 伪代码\nINSERTATION-SORT(A)\n```\nfor j = 2 to A.length\n  key = A[j]\n  // Insert A[j] into the sorted sequence A[1..j-1]\n  i = j - 1\n  while i > 0 and A[i] > key\n    A[i + 1] = A[i]\n    i = i - 1\n  A[i + 1] = key\n```\n*（伪代码的数组下标从1开始）*\n\n`for` 循环对应每一次起牌，`key` 代表起上的新牌，`while` 循环表示将新牌和手上的牌从右到左比较，直到找到比新牌小的牌的位置，最后将新牌放到这张牌的后面。\n\n### Javascript 实现\n```javascript\nfunction insertion_sort(arr) {\n  for(var i = 1; i < arr.length; i++) {\n    var key = arr[i];\n    var j = i - 1;\n    \n    while(j >= 0 && arr[j] > key) {\n      arr[j + 1] = arr[j];\n      j--;\n    }\n    arr[j + 1] = key;\n  }\n  console.log(arr)\n}\n\nvar a = [3, 1, 4, 5, 7, 2, 11, 13, 0, 9];\ninsertion_sort(a); //[0, 1, 2, 3, 4, 5, 7, 9, 11, 13]\n```\n\n### 插入排序算法的分析\n在最好情况，也就是输入数组本身已经从小到大排序了，该算法运行时间为\n```\nT(n) = an + b\n```\n是** n 的线性函数**\n\n在最坏的情况，也就是输入数组完全按倒序排列，每一次起到新的牌，都需与手中所有的牌作比较。运行时间为\n```\nT(n) = an² + bn + c\n```\n是** n 的二次函数**\n\n我们记插入排序具有最坏情况运行时间 `θ(n²)`\n\n## 归并排序\n\n### 分治法\n归并排序在结构上是递归的，完全遵循分治模式，典型地符合分治法的思想：**将原问题分解为几个规模较小但类似于原问题的子问题，递归地求解这些子问题，然后再合并这些子问题的解来建立原问题的解。**\n\n### 伪代码\n归并排序将原数组拆分成两个序列，再将每个序列继续拆分成两个序列，直到拆成长度为 1，然后递归开始回升，两两序列合并为排序好的新序列，一直到合并成为新数组。\n\n归并排序的关键就在于合并两个已经排序好的序列，我们通过调用 `MERGE(A, p, q, r)` 来完成合并，其中 A 是数组，p, q, r 是数组的下标，且 p ≤ q ≤ r。该过程假设 A[p..q] 和 A[q + 1..r] 都已经排好序，也就是这个方法用于合并两个已排好序的序列。\n\nMERGE(A, p, q, r)\n```\nn1 = q - p + 1\nn2 = r - q\nlet L[1..n1 + 1] and R[1..n2 + 1] be new arrays\nfor i = 1 to n1\n  L[i] = A[p + i - 1]\nfor j = 1 to n2\n  R[j] = A[q + j]\nL[n1 + 1] = ∞\nL[n2 + 1] = ∞\ni = 1\nj = 1\nfor k = p to r\n  if L[i] <= R[j]\n    A[k] = L[i]\n    i = i + 1\n  else\n    A[k] = R[j]\n    j = j + 1\n```\n代码中在每个序列的最后插入了一个**哨兵**，用于简化代码，避免判断是否有堆为空（因为最后一个下标 ++ 完会越界）\n\n该方法只要执行 n 次，即能将两个序列合并为新序列。\n\n现在 MERGE 方法就能作为归并排序算法中的一个子程序，接下来需要对数组进行拆分。这个方法排序数组 A[p..r] 中的元素，如果 p ≥ r, 则该子数组最多有一个元素，所以已经排好序，否则，将 A[p..r] 分成 A[p..q] 和 A[q + 1..r]。\n\nMERGE-SORT(A, p, r)\n```\nif p < r\n  q = 「(p + r) / 2」\n  MERGE-SORT(A, p, q)\n  MERGE-SORT(A, q + 1, r)\n  MERGE(A, p, q, r)\n```\n\n### Javascript 实现\n```javascript\nfunction merge(arr, p, q, r) {\n  var n1 = q - p + 1;\n  var n2 = r - q;\n  var L = [], R = [];\n  for(var i = 0; i < n1; i++) {\n    L[i] = arr[p + i];\n  }\n\n  for(var j = 0; j < n2; j++) {\n    R[j] = arr[q + 1 + j];\n  }\n\n  // 合并\n  i = 0, j = 0;\n\n  for(var k = p; k <= r; k++) {\n    if(j >= n2 || L[i] <= R[j]) {\n      arr[k] = L[i];  \n      i++;\n    } else if(i >= n1 || L[i] > R[j]) {\n      arr[k] = R[j];\n      j++;\n    }\n  }\n}\n\nfunction merge_sort(arr, p, r) {\n  if(p < r) {\n    var q = Math.floor((p + r) / 2);\n    merge_sort(arr, p, q);\n    merge_sort(arr, q + 1, r);  \n    merge(arr, p, q, r); \n  }\n  \n}\n\nvar arr = [3, 2, 6, 3, 11, 10, 17, 0, 1, 9];\nmerge_sort(arr, 0, a.length - 1)\nconsole.log(arr); // [0, 1, 2, 3, 3, 6, 9, 10, 11, 17]\n```\n\n### 归并排序算法的分析\n归并排序是将数组递归拆解再合并，可以将问题分解为一颗递归树，运行时间为 `θ(nlgn)`","source":"_posts/Introduction-to-Algorithms-2.md","raw":"---\ntitle: 《算法导论》第二章：算法基础\ndate: 2016-06-25 02:47:19\ntags: [读书笔记, 算法]\n---\n这一章考察求解了排序问题中的**插入排序**算法，并引用算法设计中的**分治法**来开发**归并排序**的算法。\n\n## 插入排序\n\n插入排序的工作方式就像许多人排序一手扑克牌。开始时手中一张牌都没有，然后我们每起一次牌，都会将它与手中的牌作比较，从左到右（或者从右到左）来找到这张牌的正确位置，一直到起到最后一张。这个算法的关键之处就在于**你拿在手上的牌始终都是已经排好序的**。\n\n### 伪代码\nINSERTATION-SORT(A)\n```\nfor j = 2 to A.length\n  key = A[j]\n  // Insert A[j] into the sorted sequence A[1..j-1]\n  i = j - 1\n  while i > 0 and A[i] > key\n    A[i + 1] = A[i]\n    i = i - 1\n  A[i + 1] = key\n```\n*（伪代码的数组下标从1开始）*\n\n`for` 循环对应每一次起牌，`key` 代表起上的新牌，`while` 循环表示将新牌和手上的牌从右到左比较，直到找到比新牌小的牌的位置，最后将新牌放到这张牌的后面。\n\n### Javascript 实现\n```javascript\nfunction insertion_sort(arr) {\n  for(var i = 1; i < arr.length; i++) {\n    var key = arr[i];\n    var j = i - 1;\n    \n    while(j >= 0 && arr[j] > key) {\n      arr[j + 1] = arr[j];\n      j--;\n    }\n    arr[j + 1] = key;\n  }\n  console.log(arr)\n}\n\nvar a = [3, 1, 4, 5, 7, 2, 11, 13, 0, 9];\ninsertion_sort(a); //[0, 1, 2, 3, 4, 5, 7, 9, 11, 13]\n```\n\n### 插入排序算法的分析\n在最好情况，也就是输入数组本身已经从小到大排序了，该算法运行时间为\n```\nT(n) = an + b\n```\n是** n 的线性函数**\n\n在最坏的情况，也就是输入数组完全按倒序排列，每一次起到新的牌，都需与手中所有的牌作比较。运行时间为\n```\nT(n) = an² + bn + c\n```\n是** n 的二次函数**\n\n我们记插入排序具有最坏情况运行时间 `θ(n²)`\n\n## 归并排序\n\n### 分治法\n归并排序在结构上是递归的，完全遵循分治模式，典型地符合分治法的思想：**将原问题分解为几个规模较小但类似于原问题的子问题，递归地求解这些子问题，然后再合并这些子问题的解来建立原问题的解。**\n\n### 伪代码\n归并排序将原数组拆分成两个序列，再将每个序列继续拆分成两个序列，直到拆成长度为 1，然后递归开始回升，两两序列合并为排序好的新序列，一直到合并成为新数组。\n\n归并排序的关键就在于合并两个已经排序好的序列，我们通过调用 `MERGE(A, p, q, r)` 来完成合并，其中 A 是数组，p, q, r 是数组的下标，且 p ≤ q ≤ r。该过程假设 A[p..q] 和 A[q + 1..r] 都已经排好序，也就是这个方法用于合并两个已排好序的序列。\n\nMERGE(A, p, q, r)\n```\nn1 = q - p + 1\nn2 = r - q\nlet L[1..n1 + 1] and R[1..n2 + 1] be new arrays\nfor i = 1 to n1\n  L[i] = A[p + i - 1]\nfor j = 1 to n2\n  R[j] = A[q + j]\nL[n1 + 1] = ∞\nL[n2 + 1] = ∞\ni = 1\nj = 1\nfor k = p to r\n  if L[i] <= R[j]\n    A[k] = L[i]\n    i = i + 1\n  else\n    A[k] = R[j]\n    j = j + 1\n```\n代码中在每个序列的最后插入了一个**哨兵**，用于简化代码，避免判断是否有堆为空（因为最后一个下标 ++ 完会越界）\n\n该方法只要执行 n 次，即能将两个序列合并为新序列。\n\n现在 MERGE 方法就能作为归并排序算法中的一个子程序，接下来需要对数组进行拆分。这个方法排序数组 A[p..r] 中的元素，如果 p ≥ r, 则该子数组最多有一个元素，所以已经排好序，否则，将 A[p..r] 分成 A[p..q] 和 A[q + 1..r]。\n\nMERGE-SORT(A, p, r)\n```\nif p < r\n  q = 「(p + r) / 2」\n  MERGE-SORT(A, p, q)\n  MERGE-SORT(A, q + 1, r)\n  MERGE(A, p, q, r)\n```\n\n### Javascript 实现\n```javascript\nfunction merge(arr, p, q, r) {\n  var n1 = q - p + 1;\n  var n2 = r - q;\n  var L = [], R = [];\n  for(var i = 0; i < n1; i++) {\n    L[i] = arr[p + i];\n  }\n\n  for(var j = 0; j < n2; j++) {\n    R[j] = arr[q + 1 + j];\n  }\n\n  // 合并\n  i = 0, j = 0;\n\n  for(var k = p; k <= r; k++) {\n    if(j >= n2 || L[i] <= R[j]) {\n      arr[k] = L[i];  \n      i++;\n    } else if(i >= n1 || L[i] > R[j]) {\n      arr[k] = R[j];\n      j++;\n    }\n  }\n}\n\nfunction merge_sort(arr, p, r) {\n  if(p < r) {\n    var q = Math.floor((p + r) / 2);\n    merge_sort(arr, p, q);\n    merge_sort(arr, q + 1, r);  \n    merge(arr, p, q, r); \n  }\n  \n}\n\nvar arr = [3, 2, 6, 3, 11, 10, 17, 0, 1, 9];\nmerge_sort(arr, 0, a.length - 1)\nconsole.log(arr); // [0, 1, 2, 3, 3, 6, 9, 10, 11, 17]\n```\n\n### 归并排序算法的分析\n归并排序是将数组递归拆解再合并，可以将问题分解为一颗递归树，运行时间为 `θ(nlgn)`","slug":"Introduction-to-Algorithms-2","published":1,"updated":"2016-06-28T15:01:41.762Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciq2fjgw600000sowdz0q1r2l","content":"<p>这一章考察求解了排序问题中的<strong>插入排序</strong>算法，并引用算法设计中的<strong>分治法</strong>来开发<strong>归并排序</strong>的算法。</p>\n<h2 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h2><p>插入排序的工作方式就像许多人排序一手扑克牌。开始时手中一张牌都没有，然后我们每起一次牌，都会将它与手中的牌作比较，从左到右（或者从右到左）来找到这张牌的正确位置，一直到起到最后一张。这个算法的关键之处就在于<strong>你拿在手上的牌始终都是已经排好序的</strong>。</p>\n<h3 id=\"伪代码\"><a href=\"#伪代码\" class=\"headerlink\" title=\"伪代码\"></a>伪代码</h3><p>INSERTATION-SORT(A)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for j = 2 to A.length</span><br><span class=\"line\">  key = A[j]</span><br><span class=\"line\">  // Insert A[j] into the sorted sequence A[1..j-1]</span><br><span class=\"line\">  i = j - 1</span><br><span class=\"line\">  while i &gt; 0 and A[i] &gt; key</span><br><span class=\"line\">    A[i + 1] = A[i]</span><br><span class=\"line\">    i = i - 1</span><br><span class=\"line\">  A[i + 1] = key</span><br></pre></td></tr></table></figure></p>\n<p><em>（伪代码的数组下标从1开始）</em></p>\n<p><code>for</code> 循环对应每一次起牌，<code>key</code> 代表起上的新牌，<code>while</code> 循环表示将新牌和手上的牌从右到左比较，直到找到比新牌小的牌的位置，最后将新牌放到这张牌的后面。</p>\n<h3 id=\"Javascript-实现\"><a href=\"#Javascript-实现\" class=\"headerlink\" title=\"Javascript 实现\"></a>Javascript 实现</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertion_sort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> key = arr[i];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> j = i - <span class=\"number\">1</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(j &gt;= <span class=\"number\">0</span> &amp;&amp; arr[j] &gt; key) &#123;</span><br><span class=\"line\">      arr[j + <span class=\"number\">1</span>] = arr[j];</span><br><span class=\"line\">      j--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    arr[j + <span class=\"number\">1</span>] = key;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arr)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">0</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\">insertion_sort(a); <span class=\"comment\">//[0, 1, 2, 3, 4, 5, 7, 9, 11, 13]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"插入排序算法的分析\"><a href=\"#插入排序算法的分析\" class=\"headerlink\" title=\"插入排序算法的分析\"></a>插入排序算法的分析</h3><p>在最好情况，也就是输入数组本身已经从小到大排序了，该算法运行时间为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T(n) = an + b</span><br></pre></td></tr></table></figure></p>\n<p>是<strong> n 的线性函数</strong></p>\n<p>在最坏的情况，也就是输入数组完全按倒序排列，每一次起到新的牌，都需与手中所有的牌作比较。运行时间为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T(n) = an² + bn + c</span><br></pre></td></tr></table></figure></p>\n<p>是<strong> n 的二次函数</strong></p>\n<p>我们记插入排序具有最坏情况运行时间 <code>θ(n²)</code></p>\n<h2 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h2><h3 id=\"分治法\"><a href=\"#分治法\" class=\"headerlink\" title=\"分治法\"></a>分治法</h3><p>归并排序在结构上是递归的，完全遵循分治模式，典型地符合分治法的思想：<strong>将原问题分解为几个规模较小但类似于原问题的子问题，递归地求解这些子问题，然后再合并这些子问题的解来建立原问题的解。</strong></p>\n<h3 id=\"伪代码-1\"><a href=\"#伪代码-1\" class=\"headerlink\" title=\"伪代码\"></a>伪代码</h3><p>归并排序将原数组拆分成两个序列，再将每个序列继续拆分成两个序列，直到拆成长度为 1，然后递归开始回升，两两序列合并为排序好的新序列，一直到合并成为新数组。</p>\n<p>归并排序的关键就在于合并两个已经排序好的序列，我们通过调用 <code>MERGE(A, p, q, r)</code> 来完成合并，其中 A 是数组，p, q, r 是数组的下标，且 p ≤ q ≤ r。该过程假设 A[p..q] 和 A[q + 1..r] 都已经排好序，也就是这个方法用于合并两个已排好序的序列。</p>\n<p>MERGE(A, p, q, r)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n1 = q - p + 1</span><br><span class=\"line\">n2 = r - q</span><br><span class=\"line\">let L[1..n1 + 1] and R[1..n2 + 1] be new arrays</span><br><span class=\"line\">for i = 1 to n1</span><br><span class=\"line\">  L[i] = A[p + i - 1]</span><br><span class=\"line\">for j = 1 to n2</span><br><span class=\"line\">  R[j] = A[q + j]</span><br><span class=\"line\">L[n1 + 1] = ∞</span><br><span class=\"line\">L[n2 + 1] = ∞</span><br><span class=\"line\">i = 1</span><br><span class=\"line\">j = 1</span><br><span class=\"line\">for k = p to r</span><br><span class=\"line\">  if L[i] &lt;= R[j]</span><br><span class=\"line\">    A[k] = L[i]</span><br><span class=\"line\">    i = i + 1</span><br><span class=\"line\">  else</span><br><span class=\"line\">    A[k] = R[j]</span><br><span class=\"line\">    j = j + 1</span><br></pre></td></tr></table></figure></p>\n<p>代码中在每个序列的最后插入了一个<strong>哨兵</strong>，用于简化代码，避免判断是否有堆为空（因为最后一个下标 ++ 完会越界）</p>\n<p>该方法只要执行 n 次，即能将两个序列合并为新序列。</p>\n<p>现在 MERGE 方法就能作为归并排序算法中的一个子程序，接下来需要对数组进行拆分。这个方法排序数组 A[p..r] 中的元素，如果 p ≥ r, 则该子数组最多有一个元素，所以已经排好序，否则，将 A[p..r] 分成 A[p..q] 和 A[q + 1..r]。</p>\n<p>MERGE-SORT(A, p, r)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if p &lt; r</span><br><span class=\"line\">  q = 「(p + r) / 2」</span><br><span class=\"line\">  MERGE-SORT(A, p, q)</span><br><span class=\"line\">  MERGE-SORT(A, q + 1, r)</span><br><span class=\"line\">  MERGE(A, p, q, r)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Javascript-实现-1\"><a href=\"#Javascript-实现-1\" class=\"headerlink\" title=\"Javascript 实现\"></a>Javascript 实现</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">merge</span>(<span class=\"params\">arr, p, q, r</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> n1 = q - p + <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> n2 = r - q;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> L = [], R = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; n1; i++) &#123;</span><br><span class=\"line\">    L[i] = arr[p + i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; n2; j++) &#123;</span><br><span class=\"line\">    R[j] = arr[q + <span class=\"number\">1</span> + j];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 合并</span></span><br><span class=\"line\">  i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k = p; k &lt;= r; k++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(j &gt;= n2 || L[i] &lt;= R[j]) &#123;</span><br><span class=\"line\">      arr[k] = L[i];  </span><br><span class=\"line\">      i++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i &gt;= n1 || L[i] &gt; R[j]) &#123;</span><br><span class=\"line\">      arr[k] = R[j];</span><br><span class=\"line\">      j++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">merge_sort</span>(<span class=\"params\">arr, p, r</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(p &lt; r) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> q = <span class=\"built_in\">Math</span>.floor((p + r) / <span class=\"number\">2</span>);</span><br><span class=\"line\">    merge_sort(arr, p, q);</span><br><span class=\"line\">    merge_sort(arr, q + <span class=\"number\">1</span>, r);  </span><br><span class=\"line\">    merge(arr, p, q, r); </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">11</span>, <span class=\"number\">10</span>, <span class=\"number\">17</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\">merge_sort(arr, <span class=\"number\">0</span>, a.length - <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr); <span class=\"comment\">// [0, 1, 2, 3, 3, 6, 9, 10, 11, 17]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"归并排序算法的分析\"><a href=\"#归并排序算法的分析\" class=\"headerlink\" title=\"归并排序算法的分析\"></a>归并排序算法的分析</h3><p>归并排序是将数组递归拆解再合并，可以将问题分解为一颗递归树，运行时间为 <code>θ(nlgn)</code></p>\n","excerpt":"","more":"<p>这一章考察求解了排序问题中的<strong>插入排序</strong>算法，并引用算法设计中的<strong>分治法</strong>来开发<strong>归并排序</strong>的算法。</p>\n<h2 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h2><p>插入排序的工作方式就像许多人排序一手扑克牌。开始时手中一张牌都没有，然后我们每起一次牌，都会将它与手中的牌作比较，从左到右（或者从右到左）来找到这张牌的正确位置，一直到起到最后一张。这个算法的关键之处就在于<strong>你拿在手上的牌始终都是已经排好序的</strong>。</p>\n<h3 id=\"伪代码\"><a href=\"#伪代码\" class=\"headerlink\" title=\"伪代码\"></a>伪代码</h3><p>INSERTATION-SORT(A)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for j = 2 to A.length</span><br><span class=\"line\">  key = A[j]</span><br><span class=\"line\">  // Insert A[j] into the sorted sequence A[1..j-1]</span><br><span class=\"line\">  i = j - 1</span><br><span class=\"line\">  while i &gt; 0 and A[i] &gt; key</span><br><span class=\"line\">    A[i + 1] = A[i]</span><br><span class=\"line\">    i = i - 1</span><br><span class=\"line\">  A[i + 1] = key</span><br></pre></td></tr></table></figure></p>\n<p><em>（伪代码的数组下标从1开始）</em></p>\n<p><code>for</code> 循环对应每一次起牌，<code>key</code> 代表起上的新牌，<code>while</code> 循环表示将新牌和手上的牌从右到左比较，直到找到比新牌小的牌的位置，最后将新牌放到这张牌的后面。</p>\n<h3 id=\"Javascript-实现\"><a href=\"#Javascript-实现\" class=\"headerlink\" title=\"Javascript 实现\"></a>Javascript 实现</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertion_sort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> key = arr[i];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> j = i - <span class=\"number\">1</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(j &gt;= <span class=\"number\">0</span> &amp;&amp; arr[j] &gt; key) &#123;</span><br><span class=\"line\">      arr[j + <span class=\"number\">1</span>] = arr[j];</span><br><span class=\"line\">      j--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    arr[j + <span class=\"number\">1</span>] = key;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arr)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">0</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\">insertion_sort(a); <span class=\"comment\">//[0, 1, 2, 3, 4, 5, 7, 9, 11, 13]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"插入排序算法的分析\"><a href=\"#插入排序算法的分析\" class=\"headerlink\" title=\"插入排序算法的分析\"></a>插入排序算法的分析</h3><p>在最好情况，也就是输入数组本身已经从小到大排序了，该算法运行时间为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T(n) = an + b</span><br></pre></td></tr></table></figure></p>\n<p>是<strong> n 的线性函数</strong></p>\n<p>在最坏的情况，也就是输入数组完全按倒序排列，每一次起到新的牌，都需与手中所有的牌作比较。运行时间为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T(n) = an² + bn + c</span><br></pre></td></tr></table></figure></p>\n<p>是<strong> n 的二次函数</strong></p>\n<p>我们记插入排序具有最坏情况运行时间 <code>θ(n²)</code></p>\n<h2 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h2><h3 id=\"分治法\"><a href=\"#分治法\" class=\"headerlink\" title=\"分治法\"></a>分治法</h3><p>归并排序在结构上是递归的，完全遵循分治模式，典型地符合分治法的思想：<strong>将原问题分解为几个规模较小但类似于原问题的子问题，递归地求解这些子问题，然后再合并这些子问题的解来建立原问题的解。</strong></p>\n<h3 id=\"伪代码-1\"><a href=\"#伪代码-1\" class=\"headerlink\" title=\"伪代码\"></a>伪代码</h3><p>归并排序将原数组拆分成两个序列，再将每个序列继续拆分成两个序列，直到拆成长度为 1，然后递归开始回升，两两序列合并为排序好的新序列，一直到合并成为新数组。</p>\n<p>归并排序的关键就在于合并两个已经排序好的序列，我们通过调用 <code>MERGE(A, p, q, r)</code> 来完成合并，其中 A 是数组，p, q, r 是数组的下标，且 p ≤ q ≤ r。该过程假设 A[p..q] 和 A[q + 1..r] 都已经排好序，也就是这个方法用于合并两个已排好序的序列。</p>\n<p>MERGE(A, p, q, r)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n1 = q - p + 1</span><br><span class=\"line\">n2 = r - q</span><br><span class=\"line\">let L[1..n1 + 1] and R[1..n2 + 1] be new arrays</span><br><span class=\"line\">for i = 1 to n1</span><br><span class=\"line\">  L[i] = A[p + i - 1]</span><br><span class=\"line\">for j = 1 to n2</span><br><span class=\"line\">  R[j] = A[q + j]</span><br><span class=\"line\">L[n1 + 1] = ∞</span><br><span class=\"line\">L[n2 + 1] = ∞</span><br><span class=\"line\">i = 1</span><br><span class=\"line\">j = 1</span><br><span class=\"line\">for k = p to r</span><br><span class=\"line\">  if L[i] &lt;= R[j]</span><br><span class=\"line\">    A[k] = L[i]</span><br><span class=\"line\">    i = i + 1</span><br><span class=\"line\">  else</span><br><span class=\"line\">    A[k] = R[j]</span><br><span class=\"line\">    j = j + 1</span><br></pre></td></tr></table></figure></p>\n<p>代码中在每个序列的最后插入了一个<strong>哨兵</strong>，用于简化代码，避免判断是否有堆为空（因为最后一个下标 ++ 完会越界）</p>\n<p>该方法只要执行 n 次，即能将两个序列合并为新序列。</p>\n<p>现在 MERGE 方法就能作为归并排序算法中的一个子程序，接下来需要对数组进行拆分。这个方法排序数组 A[p..r] 中的元素，如果 p ≥ r, 则该子数组最多有一个元素，所以已经排好序，否则，将 A[p..r] 分成 A[p..q] 和 A[q + 1..r]。</p>\n<p>MERGE-SORT(A, p, r)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if p &lt; r</span><br><span class=\"line\">  q = 「(p + r) / 2」</span><br><span class=\"line\">  MERGE-SORT(A, p, q)</span><br><span class=\"line\">  MERGE-SORT(A, q + 1, r)</span><br><span class=\"line\">  MERGE(A, p, q, r)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Javascript-实现-1\"><a href=\"#Javascript-实现-1\" class=\"headerlink\" title=\"Javascript 实现\"></a>Javascript 实现</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">merge</span>(<span class=\"params\">arr, p, q, r</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> n1 = q - p + <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> n2 = r - q;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> L = [], R = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; n1; i++) &#123;</span><br><span class=\"line\">    L[i] = arr[p + i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; n2; j++) &#123;</span><br><span class=\"line\">    R[j] = arr[q + <span class=\"number\">1</span> + j];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 合并</span></span><br><span class=\"line\">  i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k = p; k &lt;= r; k++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(j &gt;= n2 || L[i] &lt;= R[j]) &#123;</span><br><span class=\"line\">      arr[k] = L[i];  </span><br><span class=\"line\">      i++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i &gt;= n1 || L[i] &gt; R[j]) &#123;</span><br><span class=\"line\">      arr[k] = R[j];</span><br><span class=\"line\">      j++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">merge_sort</span>(<span class=\"params\">arr, p, r</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(p &lt; r) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> q = <span class=\"built_in\">Math</span>.floor((p + r) / <span class=\"number\">2</span>);</span><br><span class=\"line\">    merge_sort(arr, p, q);</span><br><span class=\"line\">    merge_sort(arr, q + <span class=\"number\">1</span>, r);  </span><br><span class=\"line\">    merge(arr, p, q, r); </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">11</span>, <span class=\"number\">10</span>, <span class=\"number\">17</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\">merge_sort(arr, <span class=\"number\">0</span>, a.length - <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr); <span class=\"comment\">// [0, 1, 2, 3, 3, 6, 9, 10, 11, 17]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"归并排序算法的分析\"><a href=\"#归并排序算法的分析\" class=\"headerlink\" title=\"归并排序算法的分析\"></a>归并排序算法的分析</h3><p>归并排序是将数组递归拆解再合并，可以将问题分解为一颗递归树，运行时间为 <code>θ(nlgn)</code></p>\n"},{"title":"使用 svg 让线条动起来","date":"2016-06-28T12:43:19.000Z","_content":"[百度echarts3官网](http://echarts.baidu.com/index.html) 上有一个非常好看的绘制 logo 的效果，通过 svg 就能实现：\n![绘制logo](http://7xo08n.com1.z0.glb.clouddn.com/blog%2Fuse-svg-draw-line/02.gif)\n\n与此类似的还有绘制签名的过程：\n![绘制签名](http://7xo08n.com1.z0.glb.clouddn.com/blog/use-svg-draw-line/01.gif)\n\n其实原理很简单，只要充分发挥想象力，加上好看的设计，就能完成很多意想不到的效果了。\n\n## 准备 svg\n首先要准备绘制的路径，SVG里用 path 来定义路径\n```html\n<svg width=\"580\" height=\"400\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path d=\"m149,123c0,1 -1.496231,3.907784 -2,8c-0.122177,0.992508 -2.206802,4.812653 -4,7c-2.285873,2.78833 -3.49295,5.234009 -6,10\" id=\"svg_27\" fill-opacity=\"null\" stroke-opacity=\"null\" stroke-width=\"1.5\" stroke=\"#000\" fill=\"none\"/>\n</svg>\n```\n网上可以找到很多在线的或客户端可以用来生成 svg，比如写这个 demo 用到的是 [这个在线编辑svg的网站](http://www.yyyweb.com/ctools/demo.php)。\n\n## 主要属性\n有了一段 path 之后，我们就可以开始让它动起来了，这里涉及到两个属性：\n- stroke-dasharray\n- stroke-dashoffset\n\n`stroke-dasharray` 可以让线条变成虚线，第一个值设置每段虚线的长度，第二个值设置虚线之间的间隔，如：\n\n原线条：\n![](http://7xo08n.com1.z0.glb.clouddn.com/blog/use-svg-draw-line/03.png)\n\n设置 `stroke-dasharray: 20 5` 之后：\n![](http://7xo08n.com1.z0.glb.clouddn.com/blog/use-svg-draw-line/04.png)\n\n`stroke-dashoffset` 用来设置虚线的偏移量\n\n## 原理\n可以想到，如果我们设置每段虚线的长度和虚线之间的间隔都大于整条路径的长度，那么虽然看起来没有变化，但实际上整个路径显示出来的只是一小段虚线。\n\n接着我们设置 `stroke-dashoffset` 让这条虚线偏移一个路径的长度，此时路径就不可见了，因为已经虚线已经偏移出路径了，而虚线间的空隙是大于一个路径长的。\n\n最后我们通过动画让 `stroke-dashoffset` 缓慢变为 0，这时就有绘制的效果了。\n\n代码示例：\n```javascript\nvar path = document.querySelector('path');\n// 获取路径的长度\nvar length = path.getTotalLength();\n// 设置起始点\npath.style.strokeDasharray = `${length} ${length}`;\npath.style.strokeDashoffset = length;\n// 获取一个区域，获取相关的样式，让浏览器寻找一个起始点。\npath.getBoundingClientRect();\n// 定义动作\npath.style.transition = 'stroke-dashoffset 2s ease-in-out';\n// 开始绘制\npath.style.strokeDashoffset = '0';\n```\n\n当要绘制签名这种有很多线条的图形时，只需要给每一段都设置好时间，通过 `transition` 的 `delay` 来控制开始时间即可。\n\n当要绘制本文一开始出现的闭合图形时，可以通过改变 `stroke-dasharray` 中的长度和间隔来控制。","source":"_posts/use-svg-to-draw-line.md","raw":"---\ntitle: 使用 svg 让线条动起来\ndate: 2016-06-28 20:43:19\ntags: [每周总结, svg]\n---\n[百度echarts3官网](http://echarts.baidu.com/index.html) 上有一个非常好看的绘制 logo 的效果，通过 svg 就能实现：\n![绘制logo](http://7xo08n.com1.z0.glb.clouddn.com/blog%2Fuse-svg-draw-line/02.gif)\n\n与此类似的还有绘制签名的过程：\n![绘制签名](http://7xo08n.com1.z0.glb.clouddn.com/blog/use-svg-draw-line/01.gif)\n\n其实原理很简单，只要充分发挥想象力，加上好看的设计，就能完成很多意想不到的效果了。\n\n## 准备 svg\n首先要准备绘制的路径，SVG里用 path 来定义路径\n```html\n<svg width=\"580\" height=\"400\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path d=\"m149,123c0,1 -1.496231,3.907784 -2,8c-0.122177,0.992508 -2.206802,4.812653 -4,7c-2.285873,2.78833 -3.49295,5.234009 -6,10\" id=\"svg_27\" fill-opacity=\"null\" stroke-opacity=\"null\" stroke-width=\"1.5\" stroke=\"#000\" fill=\"none\"/>\n</svg>\n```\n网上可以找到很多在线的或客户端可以用来生成 svg，比如写这个 demo 用到的是 [这个在线编辑svg的网站](http://www.yyyweb.com/ctools/demo.php)。\n\n## 主要属性\n有了一段 path 之后，我们就可以开始让它动起来了，这里涉及到两个属性：\n- stroke-dasharray\n- stroke-dashoffset\n\n`stroke-dasharray` 可以让线条变成虚线，第一个值设置每段虚线的长度，第二个值设置虚线之间的间隔，如：\n\n原线条：\n![](http://7xo08n.com1.z0.glb.clouddn.com/blog/use-svg-draw-line/03.png)\n\n设置 `stroke-dasharray: 20 5` 之后：\n![](http://7xo08n.com1.z0.glb.clouddn.com/blog/use-svg-draw-line/04.png)\n\n`stroke-dashoffset` 用来设置虚线的偏移量\n\n## 原理\n可以想到，如果我们设置每段虚线的长度和虚线之间的间隔都大于整条路径的长度，那么虽然看起来没有变化，但实际上整个路径显示出来的只是一小段虚线。\n\n接着我们设置 `stroke-dashoffset` 让这条虚线偏移一个路径的长度，此时路径就不可见了，因为已经虚线已经偏移出路径了，而虚线间的空隙是大于一个路径长的。\n\n最后我们通过动画让 `stroke-dashoffset` 缓慢变为 0，这时就有绘制的效果了。\n\n代码示例：\n```javascript\nvar path = document.querySelector('path');\n// 获取路径的长度\nvar length = path.getTotalLength();\n// 设置起始点\npath.style.strokeDasharray = `${length} ${length}`;\npath.style.strokeDashoffset = length;\n// 获取一个区域，获取相关的样式，让浏览器寻找一个起始点。\npath.getBoundingClientRect();\n// 定义动作\npath.style.transition = 'stroke-dashoffset 2s ease-in-out';\n// 开始绘制\npath.style.strokeDashoffset = '0';\n```\n\n当要绘制签名这种有很多线条的图形时，只需要给每一段都设置好时间，通过 `transition` 的 `delay` 来控制开始时间即可。\n\n当要绘制本文一开始出现的闭合图形时，可以通过改变 `stroke-dasharray` 中的长度和间隔来控制。","slug":"use-svg-to-draw-line","published":1,"updated":"2016-06-28T15:00:34.076Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciq2fjgwj00010sowouwqj6k6","content":"<p><a href=\"http://echarts.baidu.com/index.html\" target=\"_blank\" rel=\"external\">百度echarts3官网</a> 上有一个非常好看的绘制 logo 的效果，通过 svg 就能实现：<br><img src=\"http://7xo08n.com1.z0.glb.clouddn.com/blog%2Fuse-svg-draw-line/02.gif\" alt=\"绘制logo\"></p>\n<p>与此类似的还有绘制签名的过程：<br><img src=\"http://7xo08n.com1.z0.glb.clouddn.com/blog/use-svg-draw-line/01.gif\" alt=\"绘制签名\"></p>\n<p>其实原理很简单，只要充分发挥想象力，加上好看的设计，就能完成很多意想不到的效果了。</p>\n<h2 id=\"准备-svg\"><a href=\"#准备-svg\" class=\"headerlink\" title=\"准备 svg\"></a>准备 svg</h2><p>首先要准备绘制的路径，SVG里用 path 来定义路径<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">width</span>=<span class=\"string\">\"580\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"400\"</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/2000/svg\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">d</span>=<span class=\"string\">\"m149,123c0,1 -1.496231,3.907784 -2,8c-0.122177,0.992508 -2.206802,4.812653 -4,7c-2.285873,2.78833 -3.49295,5.234009 -6,10\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"svg_27\"</span> <span class=\"attr\">fill-opacity</span>=<span class=\"string\">\"null\"</span> <span class=\"attr\">stroke-opacity</span>=<span class=\"string\">\"null\"</span> <span class=\"attr\">stroke-width</span>=<span class=\"string\">\"1.5\"</span> <span class=\"attr\">stroke</span>=<span class=\"string\">\"#000\"</span> <span class=\"attr\">fill</span>=<span class=\"string\">\"none\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>网上可以找到很多在线的或客户端可以用来生成 svg，比如写这个 demo 用到的是 <a href=\"http://www.yyyweb.com/ctools/demo.php\" target=\"_blank\" rel=\"external\">这个在线编辑svg的网站</a>。</p>\n<h2 id=\"主要属性\"><a href=\"#主要属性\" class=\"headerlink\" title=\"主要属性\"></a>主要属性</h2><p>有了一段 path 之后，我们就可以开始让它动起来了，这里涉及到两个属性：</p>\n<ul>\n<li>stroke-dasharray</li>\n<li>stroke-dashoffset</li>\n</ul>\n<p><code>stroke-dasharray</code> 可以让线条变成虚线，第一个值设置每段虚线的长度，第二个值设置虚线之间的间隔，如：</p>\n<p>原线条：<br><img src=\"http://7xo08n.com1.z0.glb.clouddn.com/blog/use-svg-draw-line/03.png\" alt=\"\"></p>\n<p>设置 <code>stroke-dasharray: 20 5</code> 之后：<br><img src=\"http://7xo08n.com1.z0.glb.clouddn.com/blog/use-svg-draw-line/04.png\" alt=\"\"></p>\n<p><code>stroke-dashoffset</code> 用来设置虚线的偏移量</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>可以想到，如果我们设置每段虚线的长度和虚线之间的间隔都大于整条路径的长度，那么虽然看起来没有变化，但实际上整个路径显示出来的只是一小段虚线。</p>\n<p>接着我们设置 <code>stroke-dashoffset</code> 让这条虚线偏移一个路径的长度，此时路径就不可见了，因为已经虚线已经偏移出路径了，而虚线间的空隙是大于一个路径长的。</p>\n<p>最后我们通过动画让 <code>stroke-dashoffset</code> 缓慢变为 0，这时就有绘制的效果了。</p>\n<p>代码示例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 获取路径的长度</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> length = path.getTotalLength();</span><br><span class=\"line\"><span class=\"comment\">// 设置起始点</span></span><br><span class=\"line\">path.style.strokeDasharray = <span class=\"string\">`<span class=\"subst\">$&#123;length&#125;</span> <span class=\"subst\">$&#123;length&#125;</span>`</span>;</span><br><span class=\"line\">path.style.strokeDashoffset = length;</span><br><span class=\"line\"><span class=\"comment\">// 获取一个区域，获取相关的样式，让浏览器寻找一个起始点。</span></span><br><span class=\"line\">path.getBoundingClientRect();</span><br><span class=\"line\"><span class=\"comment\">// 定义动作</span></span><br><span class=\"line\">path.style.transition = <span class=\"string\">'stroke-dashoffset 2s ease-in-out'</span>;</span><br><span class=\"line\"><span class=\"comment\">// 开始绘制</span></span><br><span class=\"line\">path.style.strokeDashoffset = <span class=\"string\">'0'</span>;</span><br></pre></td></tr></table></figure></p>\n<p>当要绘制签名这种有很多线条的图形时，只需要给每一段都设置好时间，通过 <code>transition</code> 的 <code>delay</code> 来控制开始时间即可。</p>\n<p>当要绘制本文一开始出现的闭合图形时，可以通过改变 <code>stroke-dasharray</code> 中的长度和间隔来控制。</p>\n","excerpt":"","more":"<p><a href=\"http://echarts.baidu.com/index.html\">百度echarts3官网</a> 上有一个非常好看的绘制 logo 的效果，通过 svg 就能实现：<br><img src=\"http://7xo08n.com1.z0.glb.clouddn.com/blog%2Fuse-svg-draw-line/02.gif\" alt=\"绘制logo\"></p>\n<p>与此类似的还有绘制签名的过程：<br><img src=\"http://7xo08n.com1.z0.glb.clouddn.com/blog/use-svg-draw-line/01.gif\" alt=\"绘制签名\"></p>\n<p>其实原理很简单，只要充分发挥想象力，加上好看的设计，就能完成很多意想不到的效果了。</p>\n<h2 id=\"准备-svg\"><a href=\"#准备-svg\" class=\"headerlink\" title=\"准备 svg\"></a>准备 svg</h2><p>首先要准备绘制的路径，SVG里用 path 来定义路径<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">width</span>=<span class=\"string\">\"580\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"400\"</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/2000/svg\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">d</span>=<span class=\"string\">\"m149,123c0,1 -1.496231,3.907784 -2,8c-0.122177,0.992508 -2.206802,4.812653 -4,7c-2.285873,2.78833 -3.49295,5.234009 -6,10\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"svg_27\"</span> <span class=\"attr\">fill-opacity</span>=<span class=\"string\">\"null\"</span> <span class=\"attr\">stroke-opacity</span>=<span class=\"string\">\"null\"</span> <span class=\"attr\">stroke-width</span>=<span class=\"string\">\"1.5\"</span> <span class=\"attr\">stroke</span>=<span class=\"string\">\"#000\"</span> <span class=\"attr\">fill</span>=<span class=\"string\">\"none\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>网上可以找到很多在线的或客户端可以用来生成 svg，比如写这个 demo 用到的是 <a href=\"http://www.yyyweb.com/ctools/demo.php\">这个在线编辑svg的网站</a>。</p>\n<h2 id=\"主要属性\"><a href=\"#主要属性\" class=\"headerlink\" title=\"主要属性\"></a>主要属性</h2><p>有了一段 path 之后，我们就可以开始让它动起来了，这里涉及到两个属性：</p>\n<ul>\n<li>stroke-dasharray</li>\n<li>stroke-dashoffset</li>\n</ul>\n<p><code>stroke-dasharray</code> 可以让线条变成虚线，第一个值设置每段虚线的长度，第二个值设置虚线之间的间隔，如：</p>\n<p>原线条：<br><img src=\"http://7xo08n.com1.z0.glb.clouddn.com/blog/use-svg-draw-line/03.png\" alt=\"\"></p>\n<p>设置 <code>stroke-dasharray: 20 5</code> 之后：<br><img src=\"http://7xo08n.com1.z0.glb.clouddn.com/blog/use-svg-draw-line/04.png\" alt=\"\"></p>\n<p><code>stroke-dashoffset</code> 用来设置虚线的偏移量</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>可以想到，如果我们设置每段虚线的长度和虚线之间的间隔都大于整条路径的长度，那么虽然看起来没有变化，但实际上整个路径显示出来的只是一小段虚线。</p>\n<p>接着我们设置 <code>stroke-dashoffset</code> 让这条虚线偏移一个路径的长度，此时路径就不可见了，因为已经虚线已经偏移出路径了，而虚线间的空隙是大于一个路径长的。</p>\n<p>最后我们通过动画让 <code>stroke-dashoffset</code> 缓慢变为 0，这时就有绘制的效果了。</p>\n<p>代码示例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 获取路径的长度</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> length = path.getTotalLength();</span><br><span class=\"line\"><span class=\"comment\">// 设置起始点</span></span><br><span class=\"line\">path.style.strokeDasharray = <span class=\"string\">`<span class=\"subst\">$&#123;length&#125;</span> <span class=\"subst\">$&#123;length&#125;</span>`</span>;</span><br><span class=\"line\">path.style.strokeDashoffset = length;</span><br><span class=\"line\"><span class=\"comment\">// 获取一个区域，获取相关的样式，让浏览器寻找一个起始点。</span></span><br><span class=\"line\">path.getBoundingClientRect();</span><br><span class=\"line\"><span class=\"comment\">// 定义动作</span></span><br><span class=\"line\">path.style.transition = <span class=\"string\">'stroke-dashoffset 2s ease-in-out'</span>;</span><br><span class=\"line\"><span class=\"comment\">// 开始绘制</span></span><br><span class=\"line\">path.style.strokeDashoffset = <span class=\"string\">'0'</span>;</span><br></pre></td></tr></table></figure></p>\n<p>当要绘制签名这种有很多线条的图形时，只需要给每一段都设置好时间，通过 <code>transition</code> 的 <code>delay</code> 来控制开始时间即可。</p>\n<p>当要绘制本文一开始出现的闭合图形时，可以通过改变 <code>stroke-dasharray</code> 中的长度和间隔来控制。</p>\n"},{"title":"《算法导论》第四章：分治策略","date":"2016-06-29T14:59:14.000Z","_content":"在第二章的归并排序中已经使用了分治策略。在分治策略中，我们递归地求解一个问题，在每层递归中应用如下三个步骤：\n\n- **分解**步骤将问题划分为一些子问题，子问题的形式于原问题一样，只是规模更小。\n- **解决**步骤递归地求解出子问题。如果子问题的规模足够小，则停止递归，直接求解。\n- **合并**步骤将子问题的解组合成原问题的解。\n\n当问题足够大，需要递归求解时，我们称之为**递归情况**。当子问题变得足够小，不需要递归时，我们说递归已经“触底”，进入了**基本情况**。\n\n## 最大子数组问题\n假设有以下数组：`[13, -3, -25, 20, -3, -16, -23, 18, 20, -7, 12, -5, -22, 15, -4, 7]`，我们的目的是从中寻找一个连续子数组，使得数组元素之和是所有子数组中最大的。我们称这样的连续子数组为**最大子数组**。\n\n### 暴力求解方法\n我们当然可以通过暴力方法来求解：简单尝试所有可能的子数组，从中找出最大子数组。`n` 个元素一共有 `1 + 2 + 3 + ... + n` 个子数组，也就是这种方法的运行时间为 `Ω(n²)`。\n\n### 分治策略的求解方法\n假定我们要寻求子数组 A[low .. high] 的最大子数组，如果使用分治策略，这意味着我们需要把数组拆分成两个规模尽量相等的子数组，找到子数组的中点位置，假设为 `mid`，然后考虑求解两个子数组 A[low .. mid] 和 B[mid + 1 .. high。\n\n此时，A[low .. high] 的任何连续子数组 A[i .. j] 所处的位置必然是以下三种情况之一：\n\n- 完全位于子数组 A[low .. mid] 中，因此 low <= i <= j <= mid。\n- 完全位于子数组 A[mid + 1 .. high] 中，因此 mid <= i <= j <= high。\n- 跨越了中点，因此 low <= i <= mid < j <= high。\n\n所以，A[low .. high] 的最大子数组也必定是这三种情况之一，我们只需要找出这三种情况的最大值。我们可以递归地求解 A[low .. mid] 和 A[mid + 1 .. high] 的最大子数组，因为这两个子问题仍是最大子数组问题。接着寻找跨越中点的最大子数组，然后在三种情况中选取和最大者。\n\n要找出跨越中点的子数组很容易，因为它必定跨越中点，所以它一定由 A[i .. mid] 和 A[mid + 1 .. j] 组成，我们只需要找出两边最大的子数组，然后将其合并即可。\n\n过程 FIND-MAX-CROSSING-SUBARRAY 接收数组 A 和下标 low、mid 和 high 为输入，返回一个下标元组划定跨越中点的最大子数组的边界，并返回最大子数组的和。\n\nFIND-MAX-CROSSING-SUBARRAY(A, low, mid, high)\n```\nleft-sum = -∞\nsum = 0\nfor i = mid downto low\n  sum = sum + A[i]\n  if sum > left-sum\n    left-sum = sum\n    max-left = i\nright-sum = -∞\nsum = 0\nfor j = mid + 1 to high\n  sum = sum + A[j]\n  if sum > right-sum\n    right-sum = sum\n    max-right = j\nreturn (max-left, max-right, left-sum + right-sum)\n```\n\n有了 FIND-MAX-CROSSING-SUBARRAY， 我们即可设计求解最大子数组问题的分治算法的伪代码了：\n\nFIND-MAXIMUM-SUBARRAY(A, low, high)\n```\nif high == low\n  return (low, high, A[low])\nelse\n  mid = [(low + high) / 2]\n  (left-low, left-high, left-sum) = FIND-MAXIMUM-SUBARRAY(A, low, mid)\n  (right-low, right-high, right-sum) = FIND-MAXIMUM-SUBARRAY(A, mid + 1, high)\n  (cross-low, cross-high, cross-sum) = FIND-MAX-CROSSING-SUBARRAY(A, low, mid, high)\n  if left-sum >= right-sum and left-sum >= cross-sum\n    return (left-low, left-high, left-sum)\n  else right-sum >= left-sum and right-sum >= cross-sum\n    return (right-low, right-high, right-sum)\n  else\n    return (cross-low, cross-high, cross-sum)\n```\n\n要理解为什么通过递归就能求出左子数组和右子数组的最大值，关键在于想明白**递归之后子数组问题会合并**。\n\n### Javascript 实现\n```\nfunction findMaxCrossingSubarray(arr, low, mid, high) {\n  var leftIndex = 0, rightIndex = 0;\n  // left\n  var leftMax = -999;\n  var leftSum = 0;\n  for(var i = mid; i >= low; i--) {\n    leftSum += arr[i];\n    if(leftSum > leftMax) {\n      leftMax = leftSum;\n      leftIndex = i;\n    }\n  }\n\n  // right\n  var rightMax = -999;\n  var rightSum = 0;\n  for(var j = mid + 1; j <= high; j++) {\n    rightSum += arr[j];\n    if(rightSum > rightMax) {\n      rightMax = rightSum;\n      rightIndex = j;\n    }\n  }\n\n  return {\n    leftIndex: leftIndex,\n    rightIndex: rightIndex,\n    max: leftMax + rightMax\n  }\n}\n\nfunction findMaximumSubarray(arr, low, high) {\n  if(low == high) {\n    return {\n      leftIndex: low,\n      high: high,\n      max: arr[low]\n    }\n  } else {\n    var mid = Math.floor((low + high) / 2);\n    var left = findMaximumSubarray(arr, low, mid);\n    var right = findMaximumSubarray(arr, mid + 1, high);\n    var cross = findMaxCrossingSubarray(arr, low, mid, high);\n    if(left.max >= right.max && left.max >= cross.max) {\n      return left;\n    } else if (right.max >= left.max && right.max >= cross.max) {\n      return right;\n    } else {\n      return cross;\n    }\n  }\n}\n\nvar arr = [13, -3, -25, 20, -3, -16, -23, 18, 20, -7, 12, -5, -22, 15, -4, 7];\nvar maxSubarray = findMaximumSubarray(arr, 0, arr.length - 1);\n/**\n * leftIndex: 7\n * max: 43\n * rightIndex: 10\n */\nconsole.log(maxSubarray);\n```\n\n### 分治算法分析\n和归并排序一样，FIND-MAXIMUM-SUBARRAY 的运行时间\n```\nT(n) = ⊙(1)              若 n = 1\nT(n) = 2T(n / 2) + ⊙(n)  若 n > 1\n```\n解为 `T(n) = ⊙(nlgn)`\n\n*最大子数组问题实际上还存在一个线性时间的算法，并未使用分治方法*","source":"_posts/Introduction-to-Algorithms-4.md","raw":"---\ntitle: 《算法导论》第四章：分治策略\ndate: 2016-06-29 22:59:14\ntags: [读书笔记, 算法]\n---\n在第二章的归并排序中已经使用了分治策略。在分治策略中，我们递归地求解一个问题，在每层递归中应用如下三个步骤：\n\n- **分解**步骤将问题划分为一些子问题，子问题的形式于原问题一样，只是规模更小。\n- **解决**步骤递归地求解出子问题。如果子问题的规模足够小，则停止递归，直接求解。\n- **合并**步骤将子问题的解组合成原问题的解。\n\n当问题足够大，需要递归求解时，我们称之为**递归情况**。当子问题变得足够小，不需要递归时，我们说递归已经“触底”，进入了**基本情况**。\n\n## 最大子数组问题\n假设有以下数组：`[13, -3, -25, 20, -3, -16, -23, 18, 20, -7, 12, -5, -22, 15, -4, 7]`，我们的目的是从中寻找一个连续子数组，使得数组元素之和是所有子数组中最大的。我们称这样的连续子数组为**最大子数组**。\n\n### 暴力求解方法\n我们当然可以通过暴力方法来求解：简单尝试所有可能的子数组，从中找出最大子数组。`n` 个元素一共有 `1 + 2 + 3 + ... + n` 个子数组，也就是这种方法的运行时间为 `Ω(n²)`。\n\n### 分治策略的求解方法\n假定我们要寻求子数组 A[low .. high] 的最大子数组，如果使用分治策略，这意味着我们需要把数组拆分成两个规模尽量相等的子数组，找到子数组的中点位置，假设为 `mid`，然后考虑求解两个子数组 A[low .. mid] 和 B[mid + 1 .. high。\n\n此时，A[low .. high] 的任何连续子数组 A[i .. j] 所处的位置必然是以下三种情况之一：\n\n- 完全位于子数组 A[low .. mid] 中，因此 low <= i <= j <= mid。\n- 完全位于子数组 A[mid + 1 .. high] 中，因此 mid <= i <= j <= high。\n- 跨越了中点，因此 low <= i <= mid < j <= high。\n\n所以，A[low .. high] 的最大子数组也必定是这三种情况之一，我们只需要找出这三种情况的最大值。我们可以递归地求解 A[low .. mid] 和 A[mid + 1 .. high] 的最大子数组，因为这两个子问题仍是最大子数组问题。接着寻找跨越中点的最大子数组，然后在三种情况中选取和最大者。\n\n要找出跨越中点的子数组很容易，因为它必定跨越中点，所以它一定由 A[i .. mid] 和 A[mid + 1 .. j] 组成，我们只需要找出两边最大的子数组，然后将其合并即可。\n\n过程 FIND-MAX-CROSSING-SUBARRAY 接收数组 A 和下标 low、mid 和 high 为输入，返回一个下标元组划定跨越中点的最大子数组的边界，并返回最大子数组的和。\n\nFIND-MAX-CROSSING-SUBARRAY(A, low, mid, high)\n```\nleft-sum = -∞\nsum = 0\nfor i = mid downto low\n  sum = sum + A[i]\n  if sum > left-sum\n    left-sum = sum\n    max-left = i\nright-sum = -∞\nsum = 0\nfor j = mid + 1 to high\n  sum = sum + A[j]\n  if sum > right-sum\n    right-sum = sum\n    max-right = j\nreturn (max-left, max-right, left-sum + right-sum)\n```\n\n有了 FIND-MAX-CROSSING-SUBARRAY， 我们即可设计求解最大子数组问题的分治算法的伪代码了：\n\nFIND-MAXIMUM-SUBARRAY(A, low, high)\n```\nif high == low\n  return (low, high, A[low])\nelse\n  mid = [(low + high) / 2]\n  (left-low, left-high, left-sum) = FIND-MAXIMUM-SUBARRAY(A, low, mid)\n  (right-low, right-high, right-sum) = FIND-MAXIMUM-SUBARRAY(A, mid + 1, high)\n  (cross-low, cross-high, cross-sum) = FIND-MAX-CROSSING-SUBARRAY(A, low, mid, high)\n  if left-sum >= right-sum and left-sum >= cross-sum\n    return (left-low, left-high, left-sum)\n  else right-sum >= left-sum and right-sum >= cross-sum\n    return (right-low, right-high, right-sum)\n  else\n    return (cross-low, cross-high, cross-sum)\n```\n\n要理解为什么通过递归就能求出左子数组和右子数组的最大值，关键在于想明白**递归之后子数组问题会合并**。\n\n### Javascript 实现\n```\nfunction findMaxCrossingSubarray(arr, low, mid, high) {\n  var leftIndex = 0, rightIndex = 0;\n  // left\n  var leftMax = -999;\n  var leftSum = 0;\n  for(var i = mid; i >= low; i--) {\n    leftSum += arr[i];\n    if(leftSum > leftMax) {\n      leftMax = leftSum;\n      leftIndex = i;\n    }\n  }\n\n  // right\n  var rightMax = -999;\n  var rightSum = 0;\n  for(var j = mid + 1; j <= high; j++) {\n    rightSum += arr[j];\n    if(rightSum > rightMax) {\n      rightMax = rightSum;\n      rightIndex = j;\n    }\n  }\n\n  return {\n    leftIndex: leftIndex,\n    rightIndex: rightIndex,\n    max: leftMax + rightMax\n  }\n}\n\nfunction findMaximumSubarray(arr, low, high) {\n  if(low == high) {\n    return {\n      leftIndex: low,\n      high: high,\n      max: arr[low]\n    }\n  } else {\n    var mid = Math.floor((low + high) / 2);\n    var left = findMaximumSubarray(arr, low, mid);\n    var right = findMaximumSubarray(arr, mid + 1, high);\n    var cross = findMaxCrossingSubarray(arr, low, mid, high);\n    if(left.max >= right.max && left.max >= cross.max) {\n      return left;\n    } else if (right.max >= left.max && right.max >= cross.max) {\n      return right;\n    } else {\n      return cross;\n    }\n  }\n}\n\nvar arr = [13, -3, -25, 20, -3, -16, -23, 18, 20, -7, 12, -5, -22, 15, -4, 7];\nvar maxSubarray = findMaximumSubarray(arr, 0, arr.length - 1);\n/**\n * leftIndex: 7\n * max: 43\n * rightIndex: 10\n */\nconsole.log(maxSubarray);\n```\n\n### 分治算法分析\n和归并排序一样，FIND-MAXIMUM-SUBARRAY 的运行时间\n```\nT(n) = ⊙(1)              若 n = 1\nT(n) = 2T(n / 2) + ⊙(n)  若 n > 1\n```\n解为 `T(n) = ⊙(nlgn)`\n\n*最大子数组问题实际上还存在一个线性时间的算法，并未使用分治方法*","slug":"Introduction-to-Algorithms-4","published":1,"updated":"2016-06-29T15:52:43.458Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciq2fjhbe000a0sow4cirpqz9","content":"<p>在第二章的归并排序中已经使用了分治策略。在分治策略中，我们递归地求解一个问题，在每层递归中应用如下三个步骤：</p>\n<ul>\n<li><strong>分解</strong>步骤将问题划分为一些子问题，子问题的形式于原问题一样，只是规模更小。</li>\n<li><strong>解决</strong>步骤递归地求解出子问题。如果子问题的规模足够小，则停止递归，直接求解。</li>\n<li><strong>合并</strong>步骤将子问题的解组合成原问题的解。</li>\n</ul>\n<p>当问题足够大，需要递归求解时，我们称之为<strong>递归情况</strong>。当子问题变得足够小，不需要递归时，我们说递归已经“触底”，进入了<strong>基本情况</strong>。</p>\n<h2 id=\"最大子数组问题\"><a href=\"#最大子数组问题\" class=\"headerlink\" title=\"最大子数组问题\"></a>最大子数组问题</h2><p>假设有以下数组：<code>[13, -3, -25, 20, -3, -16, -23, 18, 20, -7, 12, -5, -22, 15, -4, 7]</code>，我们的目的是从中寻找一个连续子数组，使得数组元素之和是所有子数组中最大的。我们称这样的连续子数组为<strong>最大子数组</strong>。</p>\n<h3 id=\"暴力求解方法\"><a href=\"#暴力求解方法\" class=\"headerlink\" title=\"暴力求解方法\"></a>暴力求解方法</h3><p>我们当然可以通过暴力方法来求解：简单尝试所有可能的子数组，从中找出最大子数组。<code>n</code> 个元素一共有 <code>1 + 2 + 3 + ... + n</code> 个子数组，也就是这种方法的运行时间为 <code>Ω(n²)</code>。</p>\n<h3 id=\"分治策略的求解方法\"><a href=\"#分治策略的求解方法\" class=\"headerlink\" title=\"分治策略的求解方法\"></a>分治策略的求解方法</h3><p>假定我们要寻求子数组 A[low .. high] 的最大子数组，如果使用分治策略，这意味着我们需要把数组拆分成两个规模尽量相等的子数组，找到子数组的中点位置，假设为 <code>mid</code>，然后考虑求解两个子数组 A[low .. mid] 和 B[mid + 1 .. high。</p>\n<p>此时，A[low .. high] 的任何连续子数组 A[i .. j] 所处的位置必然是以下三种情况之一：</p>\n<ul>\n<li>完全位于子数组 A[low .. mid] 中，因此 low &lt;= i &lt;= j &lt;= mid。</li>\n<li>完全位于子数组 A[mid + 1 .. high] 中，因此 mid &lt;= i &lt;= j &lt;= high。</li>\n<li>跨越了中点，因此 low &lt;= i &lt;= mid &lt; j &lt;= high。</li>\n</ul>\n<p>所以，A[low .. high] 的最大子数组也必定是这三种情况之一，我们只需要找出这三种情况的最大值。我们可以递归地求解 A[low .. mid] 和 A[mid + 1 .. high] 的最大子数组，因为这两个子问题仍是最大子数组问题。接着寻找跨越中点的最大子数组，然后在三种情况中选取和最大者。</p>\n<p>要找出跨越中点的子数组很容易，因为它必定跨越中点，所以它一定由 A[i .. mid] 和 A[mid + 1 .. j] 组成，我们只需要找出两边最大的子数组，然后将其合并即可。</p>\n<p>过程 FIND-MAX-CROSSING-SUBARRAY 接收数组 A 和下标 low、mid 和 high 为输入，返回一个下标元组划定跨越中点的最大子数组的边界，并返回最大子数组的和。</p>\n<p>FIND-MAX-CROSSING-SUBARRAY(A, low, mid, high)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">left-sum = -∞</span><br><span class=\"line\">sum = 0</span><br><span class=\"line\">for i = mid downto low</span><br><span class=\"line\">  sum = sum + A[i]</span><br><span class=\"line\">  if sum &gt; left-sum</span><br><span class=\"line\">    left-sum = sum</span><br><span class=\"line\">    max-left = i</span><br><span class=\"line\">right-sum = -∞</span><br><span class=\"line\">sum = 0</span><br><span class=\"line\">for j = mid + 1 to high</span><br><span class=\"line\">  sum = sum + A[j]</span><br><span class=\"line\">  if sum &gt; right-sum</span><br><span class=\"line\">    right-sum = sum</span><br><span class=\"line\">    max-right = j</span><br><span class=\"line\">return (max-left, max-right, left-sum + right-sum)</span><br></pre></td></tr></table></figure></p>\n<p>有了 FIND-MAX-CROSSING-SUBARRAY， 我们即可设计求解最大子数组问题的分治算法的伪代码了：</p>\n<p>FIND-MAXIMUM-SUBARRAY(A, low, high)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if high == low</span><br><span class=\"line\">  return (low, high, A[low])</span><br><span class=\"line\">else</span><br><span class=\"line\">  mid = [(low + high) / 2]</span><br><span class=\"line\">  (left-low, left-high, left-sum) = FIND-MAXIMUM-SUBARRAY(A, low, mid)</span><br><span class=\"line\">  (right-low, right-high, right-sum) = FIND-MAXIMUM-SUBARRAY(A, mid + 1, high)</span><br><span class=\"line\">  (cross-low, cross-high, cross-sum) = FIND-MAX-CROSSING-SUBARRAY(A, low, mid, high)</span><br><span class=\"line\">  if left-sum &gt;= right-sum and left-sum &gt;= cross-sum</span><br><span class=\"line\">    return (left-low, left-high, left-sum)</span><br><span class=\"line\">  else right-sum &gt;= left-sum and right-sum &gt;= cross-sum</span><br><span class=\"line\">    return (right-low, right-high, right-sum)</span><br><span class=\"line\">  else</span><br><span class=\"line\">    return (cross-low, cross-high, cross-sum)</span><br></pre></td></tr></table></figure></p>\n<p>要理解为什么通过递归就能求出左子数组和右子数组的最大值，关键在于想明白<strong>递归之后子数组问题会合并</strong>。</p>\n<h3 id=\"Javascript-实现\"><a href=\"#Javascript-实现\" class=\"headerlink\" title=\"Javascript 实现\"></a>Javascript 实现</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function findMaxCrossingSubarray(arr, low, mid, high) &#123;</span><br><span class=\"line\">  var leftIndex = 0, rightIndex = 0;</span><br><span class=\"line\">  // left</span><br><span class=\"line\">  var leftMax = -999;</span><br><span class=\"line\">  var leftSum = 0;</span><br><span class=\"line\">  for(var i = mid; i &gt;= low; i--) &#123;</span><br><span class=\"line\">    leftSum += arr[i];</span><br><span class=\"line\">    if(leftSum &gt; leftMax) &#123;</span><br><span class=\"line\">      leftMax = leftSum;</span><br><span class=\"line\">      leftIndex = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // right</span><br><span class=\"line\">  var rightMax = -999;</span><br><span class=\"line\">  var rightSum = 0;</span><br><span class=\"line\">  for(var j = mid + 1; j &lt;= high; j++) &#123;</span><br><span class=\"line\">    rightSum += arr[j];</span><br><span class=\"line\">    if(rightSum &gt; rightMax) &#123;</span><br><span class=\"line\">      rightMax = rightSum;</span><br><span class=\"line\">      rightIndex = j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    leftIndex: leftIndex,</span><br><span class=\"line\">    rightIndex: rightIndex,</span><br><span class=\"line\">    max: leftMax + rightMax</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function findMaximumSubarray(arr, low, high) &#123;</span><br><span class=\"line\">  if(low == high) &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      leftIndex: low,</span><br><span class=\"line\">      high: high,</span><br><span class=\"line\">      max: arr[low]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    var mid = Math.floor((low + high) / 2);</span><br><span class=\"line\">    var left = findMaximumSubarray(arr, low, mid);</span><br><span class=\"line\">    var right = findMaximumSubarray(arr, mid + 1, high);</span><br><span class=\"line\">    var cross = findMaxCrossingSubarray(arr, low, mid, high);</span><br><span class=\"line\">    if(left.max &gt;= right.max &amp;&amp; left.max &gt;= cross.max) &#123;</span><br><span class=\"line\">      return left;</span><br><span class=\"line\">    &#125; else if (right.max &gt;= left.max &amp;&amp; right.max &gt;= cross.max) &#123;</span><br><span class=\"line\">      return right;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      return cross;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var arr = [13, -3, -25, 20, -3, -16, -23, 18, 20, -7, 12, -5, -22, 15, -4, 7];</span><br><span class=\"line\">var maxSubarray = findMaximumSubarray(arr, 0, arr.length - 1);</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * leftIndex: 7</span><br><span class=\"line\"> * max: 43</span><br><span class=\"line\"> * rightIndex: 10</span><br><span class=\"line\"> */</span><br><span class=\"line\">console.log(maxSubarray);</span><br></pre></td></tr></table></figure>\n<h3 id=\"分治算法分析\"><a href=\"#分治算法分析\" class=\"headerlink\" title=\"分治算法分析\"></a>分治算法分析</h3><p>和归并排序一样，FIND-MAXIMUM-SUBARRAY 的运行时间<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T(n) = ⊙(1)              若 n = 1</span><br><span class=\"line\">T(n) = 2T(n / 2) + ⊙(n)  若 n &gt; 1</span><br></pre></td></tr></table></figure></p>\n<p>解为 <code>T(n) = ⊙(nlgn)</code></p>\n<p><em>最大子数组问题实际上还存在一个线性时间的算法，并未使用分治方法</em></p>\n","excerpt":"","more":"<p>在第二章的归并排序中已经使用了分治策略。在分治策略中，我们递归地求解一个问题，在每层递归中应用如下三个步骤：</p>\n<ul>\n<li><strong>分解</strong>步骤将问题划分为一些子问题，子问题的形式于原问题一样，只是规模更小。</li>\n<li><strong>解决</strong>步骤递归地求解出子问题。如果子问题的规模足够小，则停止递归，直接求解。</li>\n<li><strong>合并</strong>步骤将子问题的解组合成原问题的解。</li>\n</ul>\n<p>当问题足够大，需要递归求解时，我们称之为<strong>递归情况</strong>。当子问题变得足够小，不需要递归时，我们说递归已经“触底”，进入了<strong>基本情况</strong>。</p>\n<h2 id=\"最大子数组问题\"><a href=\"#最大子数组问题\" class=\"headerlink\" title=\"最大子数组问题\"></a>最大子数组问题</h2><p>假设有以下数组：<code>[13, -3, -25, 20, -3, -16, -23, 18, 20, -7, 12, -5, -22, 15, -4, 7]</code>，我们的目的是从中寻找一个连续子数组，使得数组元素之和是所有子数组中最大的。我们称这样的连续子数组为<strong>最大子数组</strong>。</p>\n<h3 id=\"暴力求解方法\"><a href=\"#暴力求解方法\" class=\"headerlink\" title=\"暴力求解方法\"></a>暴力求解方法</h3><p>我们当然可以通过暴力方法来求解：简单尝试所有可能的子数组，从中找出最大子数组。<code>n</code> 个元素一共有 <code>1 + 2 + 3 + ... + n</code> 个子数组，也就是这种方法的运行时间为 <code>Ω(n²)</code>。</p>\n<h3 id=\"分治策略的求解方法\"><a href=\"#分治策略的求解方法\" class=\"headerlink\" title=\"分治策略的求解方法\"></a>分治策略的求解方法</h3><p>假定我们要寻求子数组 A[low .. high] 的最大子数组，如果使用分治策略，这意味着我们需要把数组拆分成两个规模尽量相等的子数组，找到子数组的中点位置，假设为 <code>mid</code>，然后考虑求解两个子数组 A[low .. mid] 和 B[mid + 1 .. high。</p>\n<p>此时，A[low .. high] 的任何连续子数组 A[i .. j] 所处的位置必然是以下三种情况之一：</p>\n<ul>\n<li>完全位于子数组 A[low .. mid] 中，因此 low &lt;= i &lt;= j &lt;= mid。</li>\n<li>完全位于子数组 A[mid + 1 .. high] 中，因此 mid &lt;= i &lt;= j &lt;= high。</li>\n<li>跨越了中点，因此 low &lt;= i &lt;= mid &lt; j &lt;= high。</li>\n</ul>\n<p>所以，A[low .. high] 的最大子数组也必定是这三种情况之一，我们只需要找出这三种情况的最大值。我们可以递归地求解 A[low .. mid] 和 A[mid + 1 .. high] 的最大子数组，因为这两个子问题仍是最大子数组问题。接着寻找跨越中点的最大子数组，然后在三种情况中选取和最大者。</p>\n<p>要找出跨越中点的子数组很容易，因为它必定跨越中点，所以它一定由 A[i .. mid] 和 A[mid + 1 .. j] 组成，我们只需要找出两边最大的子数组，然后将其合并即可。</p>\n<p>过程 FIND-MAX-CROSSING-SUBARRAY 接收数组 A 和下标 low、mid 和 high 为输入，返回一个下标元组划定跨越中点的最大子数组的边界，并返回最大子数组的和。</p>\n<p>FIND-MAX-CROSSING-SUBARRAY(A, low, mid, high)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">left-sum = -∞</span><br><span class=\"line\">sum = 0</span><br><span class=\"line\">for i = mid downto low</span><br><span class=\"line\">  sum = sum + A[i]</span><br><span class=\"line\">  if sum &gt; left-sum</span><br><span class=\"line\">    left-sum = sum</span><br><span class=\"line\">    max-left = i</span><br><span class=\"line\">right-sum = -∞</span><br><span class=\"line\">sum = 0</span><br><span class=\"line\">for j = mid + 1 to high</span><br><span class=\"line\">  sum = sum + A[j]</span><br><span class=\"line\">  if sum &gt; right-sum</span><br><span class=\"line\">    right-sum = sum</span><br><span class=\"line\">    max-right = j</span><br><span class=\"line\">return (max-left, max-right, left-sum + right-sum)</span><br></pre></td></tr></table></figure></p>\n<p>有了 FIND-MAX-CROSSING-SUBARRAY， 我们即可设计求解最大子数组问题的分治算法的伪代码了：</p>\n<p>FIND-MAXIMUM-SUBARRAY(A, low, high)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if high == low</span><br><span class=\"line\">  return (low, high, A[low])</span><br><span class=\"line\">else</span><br><span class=\"line\">  mid = [(low + high) / 2]</span><br><span class=\"line\">  (left-low, left-high, left-sum) = FIND-MAXIMUM-SUBARRAY(A, low, mid)</span><br><span class=\"line\">  (right-low, right-high, right-sum) = FIND-MAXIMUM-SUBARRAY(A, mid + 1, high)</span><br><span class=\"line\">  (cross-low, cross-high, cross-sum) = FIND-MAX-CROSSING-SUBARRAY(A, low, mid, high)</span><br><span class=\"line\">  if left-sum &gt;= right-sum and left-sum &gt;= cross-sum</span><br><span class=\"line\">    return (left-low, left-high, left-sum)</span><br><span class=\"line\">  else right-sum &gt;= left-sum and right-sum &gt;= cross-sum</span><br><span class=\"line\">    return (right-low, right-high, right-sum)</span><br><span class=\"line\">  else</span><br><span class=\"line\">    return (cross-low, cross-high, cross-sum)</span><br></pre></td></tr></table></figure></p>\n<p>要理解为什么通过递归就能求出左子数组和右子数组的最大值，关键在于想明白<strong>递归之后子数组问题会合并</strong>。</p>\n<h3 id=\"Javascript-实现\"><a href=\"#Javascript-实现\" class=\"headerlink\" title=\"Javascript 实现\"></a>Javascript 实现</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function findMaxCrossingSubarray(arr, low, mid, high) &#123;</span><br><span class=\"line\">  var leftIndex = 0, rightIndex = 0;</span><br><span class=\"line\">  // left</span><br><span class=\"line\">  var leftMax = -999;</span><br><span class=\"line\">  var leftSum = 0;</span><br><span class=\"line\">  for(var i = mid; i &gt;= low; i--) &#123;</span><br><span class=\"line\">    leftSum += arr[i];</span><br><span class=\"line\">    if(leftSum &gt; leftMax) &#123;</span><br><span class=\"line\">      leftMax = leftSum;</span><br><span class=\"line\">      leftIndex = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // right</span><br><span class=\"line\">  var rightMax = -999;</span><br><span class=\"line\">  var rightSum = 0;</span><br><span class=\"line\">  for(var j = mid + 1; j &lt;= high; j++) &#123;</span><br><span class=\"line\">    rightSum += arr[j];</span><br><span class=\"line\">    if(rightSum &gt; rightMax) &#123;</span><br><span class=\"line\">      rightMax = rightSum;</span><br><span class=\"line\">      rightIndex = j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    leftIndex: leftIndex,</span><br><span class=\"line\">    rightIndex: rightIndex,</span><br><span class=\"line\">    max: leftMax + rightMax</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function findMaximumSubarray(arr, low, high) &#123;</span><br><span class=\"line\">  if(low == high) &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      leftIndex: low,</span><br><span class=\"line\">      high: high,</span><br><span class=\"line\">      max: arr[low]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    var mid = Math.floor((low + high) / 2);</span><br><span class=\"line\">    var left = findMaximumSubarray(arr, low, mid);</span><br><span class=\"line\">    var right = findMaximumSubarray(arr, mid + 1, high);</span><br><span class=\"line\">    var cross = findMaxCrossingSubarray(arr, low, mid, high);</span><br><span class=\"line\">    if(left.max &gt;= right.max &amp;&amp; left.max &gt;= cross.max) &#123;</span><br><span class=\"line\">      return left;</span><br><span class=\"line\">    &#125; else if (right.max &gt;= left.max &amp;&amp; right.max &gt;= cross.max) &#123;</span><br><span class=\"line\">      return right;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      return cross;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var arr = [13, -3, -25, 20, -3, -16, -23, 18, 20, -7, 12, -5, -22, 15, -4, 7];</span><br><span class=\"line\">var maxSubarray = findMaximumSubarray(arr, 0, arr.length - 1);</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * leftIndex: 7</span><br><span class=\"line\"> * max: 43</span><br><span class=\"line\"> * rightIndex: 10</span><br><span class=\"line\"> */</span><br><span class=\"line\">console.log(maxSubarray);</span><br></pre></td></tr></table></figure>\n<h3 id=\"分治算法分析\"><a href=\"#分治算法分析\" class=\"headerlink\" title=\"分治算法分析\"></a>分治算法分析</h3><p>和归并排序一样，FIND-MAXIMUM-SUBARRAY 的运行时间<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T(n) = ⊙(1)              若 n = 1</span><br><span class=\"line\">T(n) = 2T(n / 2) + ⊙(n)  若 n &gt; 1</span><br></pre></td></tr></table></figure></p>\n<p>解为 <code>T(n) = ⊙(nlgn)</code></p>\n<p><em>最大子数组问题实际上还存在一个线性时间的算法，并未使用分治方法</em></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ciq2fjgw600000sowdz0q1r2l","tag_id":"ciq2fjgwn00020sowdqeh62sx","_id":"ciq2fjgwz00050sowtpdo7fao"},{"post_id":"ciq2fjgw600000sowdz0q1r2l","tag_id":"ciq2fjgww00030sow1ocsrvfd","_id":"ciq2fjgwz00060sowfizh038w"},{"post_id":"ciq2fjgwj00010sowouwqj6k6","tag_id":"ciq2fjgwx00040sow07878tvx","_id":"ciq2fjgx100080sowdsouelpc"},{"post_id":"ciq2fjgwj00010sowouwqj6k6","tag_id":"ciq2fjgx000070sowmineqqpj","_id":"ciq2fjgx100090sowci7dt6k2"},{"post_id":"ciq2fjhbe000a0sow4cirpqz9","tag_id":"ciq2fjgwn00020sowdqeh62sx","_id":"ciq2fjhbk000b0sowdcxnmnzj"},{"post_id":"ciq2fjhbe000a0sow4cirpqz9","tag_id":"ciq2fjgww00030sow1ocsrvfd","_id":"ciq2fjhbm000c0sow7s6yn9r4"}],"Tag":[{"name":"读书笔记","_id":"ciq2fjgwn00020sowdqeh62sx"},{"name":"算法","_id":"ciq2fjgww00030sow1ocsrvfd"},{"name":"每周总结","_id":"ciq2fjgwx00040sow07878tvx"},{"name":"svg","_id":"ciq2fjgx000070sowmineqqpj"}]}}